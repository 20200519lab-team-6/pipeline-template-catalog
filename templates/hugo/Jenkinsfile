library 'cb-days@master'
def hugoPodYaml = libraryResource 'podtemplates/hugo/pod.yml'
pipeline {
  agent none
  options { 
    buildDiscarder(logRotator(numToKeepStr: '2'))
    skipDefaultCheckout true
    preserveStashes(buildCount: 2)
  }
  environment {
    repoOwner = "${repoOwner}"
    credId = "${githubCredentialId}"
  }
  stages {
    stage('Preview environment') {
      agent {
        kubernetes {
          label 'hugo-builder'
          yaml hugoPodYaml
        }
      }
      when {
        beforeAgent true
        branch 'pr-*'
      }
      stages {
        stage("Build site") {
          steps {
            checkout scm
            container('hugo') {
              sh 'hugo -b http://${BRANCH_NAME}.blog.cb-sa.io'
              stash name: "public", includes: "public/*"
            }
          }
        }
        stage("Build and push image") {
          steps {
            kanikoBuildPushGeneric(env.IMAGE_NAME, env.IMAGE_TAG, "${gcpProject}"){
              checkout scm
              dir("public") {
                unstash "public"
              }
              sh 'ls'
              sh 'ls public/*'
            }
          }
        }
      }
    }
    // stage('Build and Push Image') {
    //   when {
    //     beforeAgent true
    //     branch 'master'
    //   }
    //   steps {  
    //     echo "${repoOwner}"
    //     kanikoBuildPush(env.IMAGE_NAME, env.IMAGE_TAG, "${gcpProject}") {
    //       checkout scm
    //     }
    //   }
    //   post {
    //     success {
    //       echo "${JOB_NAME} pipeline job is awaiting approval at: ${RUN_DISPLAY_URL}"
    //     }
    //   }
    // }
    // stage('Deploy') {
    //   when {
    //     beforeAgent true
    //     branch 'master'
    //   }
    //   options {
    //     timeout(time: 90, unit: 'SECONDS') 
    //   }
    //   steps {
    //     input(message: "Should we deploy?", ok: "Deploy", submitterParameter: "APPROVER")
    //     kubeDeploy(env.IMAGE_NAME, env.IMAGE_TAG, "${githubCredentialId}", "${repoOwner}")
    //   }
    // }   
  }
}
