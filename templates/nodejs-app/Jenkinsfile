#!groovy
library 'cb-days'
def testPodYaml = libraryResource 'podtemplates/nodejs-app/test-pod.yml'
pipeline {
  agent none
  options { 
    buildDiscarder(logRotator(numToKeepStr: '2'))
    skipDefaultCheckout true
    preserveStashes(buildCount: 2)
  }
  triggers {
    eventTrigger simpleMatch('hello-api')
  }
  stages {
    stage('Test') {
      agent {
        kubernetes {
          label 'nodejs-app-inline'
          yaml testPodYaml
        }
      }
      when {
        beforeAgent true
        branch 'develoment'
      }
      stages {
        stage('App Setup') {
          steps {
            checkout scm
            defineProps(env.MARKER_FILE, [npmPackages: npmPackages])
            container('nodejs') {
              sh """
                npm i -S ${npmPackages}
                node ./hello.js &
              """
            }
          }
        }
        stage('Browser Tests') {
          steps {
            script {
              parallel chrome: {
                container('testcafe-chrome') {
                  sh '/opt/testcafe/docker/testcafe-docker.sh "chromium --no-sandbox" tests/*.js -r xunit:res-chrome.xml'
                }
              }, 
              firefox: {
                  container('testcafe-firefox') {
                    sh '/opt/testcafe/docker/testcafe-docker.sh firefox --ports 1339,1340 tests/*.js -r xunit:res-firefox.xml'
                  }
              }
            }
          }
        }
      }
      post {
        success {
          stash name: 'app', includes: '*.js, public/**, views/*, Dockerfile'
        }
        always {
          junit 'res*.xml'
        }
      }    
    }
    stage('Build and Push Image') {
      when {
        beforeAgent true
        branch 'develoment'
      }
      steps {
        dockerBuildPush(env.IMAGE_NAME, env.IMAGE_TAG) {
          unstash 'app'
        }
      }
    }
    stage('Deploy') {
      when {
        beforeAgent true
        branch 'master'
      }
      options {
        timeout(time: 60, unit: 'SECONDS') 
      }
      input {
        message "Should we deploy?"
        submitterParameter "APPROVER"
      }
      steps {
        kubeDeploy(env.IMAGE_NAME, env.IMAGE_TAG)
      }
    }
  }
}
